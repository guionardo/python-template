name: Testing and Linting

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Detect dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipreqs flake8 pytest coverage

      - name: Merge dependencies
        run: |
          pipreqs --encoding utf-8 --savepath requirements.pipreqs.txt
          if [ -f requirements.txt ]; then
            sort requirements.txt requirements.pipreqs.txt | uniq > requirements.txt.new
            mv requirements.txt.new requirements.txt
            rm requirements.pipreqs.txt
          else
            mv requirements.pipreqs.txt requirements.txt
          fi
      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest

      - name: Run coverage
        run: |
          coverage run -m unittest

      - name: Generate coverage report
        run: |
          echo "# Coverage report $(date)" > coverage.txt
          echo "" >> coverage.txt
          echo "```bash" >> coverage.txt
          coverage report >> coverage.txt
          echo "```" >> coverage.txt

      - name: Commit coverage report
        run: |          
          git add coverage.txt
          git commit -m "Updating coverage report"

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
